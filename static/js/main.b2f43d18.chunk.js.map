{"version":3,"sources":["components/Header/Header.js","components/ShowCase/ShowCase.js","components/MovieCard/MovieCard.js","components/MoviesGroup/MoviesGroup.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Avatar","style","borderRadius","marginRight","ShowCase","Button","size","MovieCard","useState","cardText","setCardText","onMouseLeave","e","onMouseEnter","opacity","MoviesGroup","category","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"saA0CeA,MAnCf,WACE,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,gBACb,yBACEA,UAAU,eACVC,IAAI,6DACJC,IAAI,YAEN,wCACS,kBAAC,IAAD,OAET,sCAGF,yBAAKF,UAAU,iBACb,8BACE,kBAAC,IAAD,MADF,WAGA,8BACE,kBAAC,IAAD,OAEF,8BACE,kBAACG,EAAA,EAAD,CACEF,IAAI,8DACJG,MAAO,CAAEC,aAAc,IAAKC,YAAa,SAH7C,WAME,kBAAC,IAAD,U,gBCnBKC,MAZf,WACE,OACE,yBAAKP,UAAU,YACb,yBAAKA,UAAU,qBACb,iDACA,mDACA,kBAACQ,EAAA,EAAD,CAAQC,KAAK,SAAb,qB,cCsBOC,MA7Bf,WAAsB,IAAD,EACaC,mBAAS,KADtB,mBACZC,EADY,KACFC,EADE,KAWnB,OACE,yBACEC,aANJ,SAA0BC,GACxBF,EAAY,MAMVG,aAXJ,SAA0BD,GACxBF,EAAY,MAWVb,UAAU,aAEV,yBAAKI,MAAO,CAAEa,QAASL,GAAYZ,UAAU,mBAC3C,0CACA,yGAIA,qD,MCROkB,MAdf,YAAiD,IAAD,IAAzBC,gBAAyB,MAAd,WAAc,EAC9C,OACE,yBAAKnB,UAAU,cACb,4BAAKmB,GACL,yBAAKnB,UAAU,0BACb,kBAAC,EAAD,CAAWmB,SAAUA,IACrB,kBAAC,EAAD,CAAWA,SAAUA,IACrB,kBAAC,EAAD,CAAWA,SAAUA,IACrB,kBAAC,EAAD,CAAWA,SAAUA,O,MCDdC,MARf,WACE,OACE,yBAAKpB,UAAU,UACb,sFCsBSqB,MArBf,WACE,OACE,yBAAKrB,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAKA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAamB,SAAS,cACtB,kBAAC,EAAD,CAAaA,SAAS,QACtB,kBAAC,EAAD,CAAaA,SAAS,SAEtB,kBAAC,EAAD,QCXcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2f43d18.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__left\">\r\n        <img\r\n          className=\"header__logo\"\r\n          src=\"https://www.logo.wine/a/logo/Netflix/Netflix-Logo.wine.svg\"\r\n          alt=\"NETFLIX\"\r\n        />\r\n        <span>\r\n          Browse <ArrowDropDownIcon />\r\n        </span>\r\n        <span>DVD</span>\r\n      </div>\r\n\r\n      <div className=\"header__right\">\r\n        <span>\r\n          <SearchIcon /> Search\r\n        </span>\r\n        <span>\r\n          <NotificationsIcon />\r\n        </span>\r\n        <span>\r\n          <Avatar\r\n            src=\"https://uploads.scratch.mit.edu/users/avatars/1182/0844.png\"\r\n            style={{ borderRadius: \"0\", marginRight: \"5px\" }}\r\n          />\r\n          Jhon Doe\r\n          <ArrowDropDownIcon />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./ShowCase.css\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction ShowCase() {\r\n  return (\r\n    <div className=\"showcase\">\r\n      <div className=\"showcase__content\">\r\n        <h1>Unlimited movies,</h1>\r\n        <h1>TV shows, and more.</h1>\r\n        <Button size=\"large\">Find Out More </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShowCase;\r\n","import React, { useState } from \"react\";\r\nimport \"./MovieCard.css\";\r\n\r\nfunction MovieCard() {\r\n  const [cardText, setCardText] = useState(\"0\");\r\n\r\n  function handleMouseEnter(e) {\r\n    setCardText(\"1\");\r\n  }\r\n\r\n  function handleMouseLeave(e) {\r\n    setCardText(\"0\");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onMouseLeave={handleMouseLeave}\r\n      onMouseEnter={handleMouseEnter}\r\n      className=\"movieCard\"\r\n    >\r\n      <div style={{ opacity: cardText }} className=\"movieCard_items\">\r\n        <h2>Movie Name</h2>\r\n        <p>\r\n          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Sit,\r\n          architecto.\r\n        </p>\r\n        <small>15 January 2020</small>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieCard;\r\n","import React from \"react\";\r\nimport MovieCard from \"../MovieCard/MovieCard\";\r\nimport \"./MoviesGroup.css\";\r\n\r\nfunction MoviesGroup({ category = \"Featured\" }) {\r\n  return (\r\n    <div className=\"movieGroup\">\r\n      <h1>{category}</h1>\r\n      <div className=\"movieGroup__collection\">\r\n        <MovieCard category={category} />\r\n        <MovieCard category={category} />\r\n        <MovieCard category={category} />\r\n        <MovieCard category={category} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoviesGroup;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>All right Reserved For Netflix-Clone Project &copy;2020</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport ShowCase from \"./components/ShowCase/ShowCase\";\nimport MoviesGroup from \"./components/MoviesGroup/MoviesGroup\";\nimport Footer from \"./components/Footer/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* HEADER */}\n      <Header />\n      {/* ShowCase */}\n      <ShowCase />\n\n      {/* SLIDES */}\n      {/* --> MovieCardCollection */}\n      {/* ----> MovieCard */}\n      <MoviesGroup />\n      <MoviesGroup category=\"Upcomming\" />\n      <MoviesGroup category=\"New\" />\n      <MoviesGroup category=\"2020\" />\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}